{"version":3,"sources":["configs/envs/development.js","configs/envs/production.js","configs/envs/testing.js","configs/envs/staging.js","configs/envs/index.js","configs/index.js","components/Avatar/Avatar.js","components/UploadContent/UploadContent.js","components/Select/Select.js","store/HospitalList/hospitalListActions.js","store/HospitalList/hospitalListTypes.js","Page/FormContent/FormContent.js","store/ManageContent/manageContentActions.js","store/ManageContent/manageContentTypes.js","Page/Login/Login.js","routes.js","history.js","App.js","serviceWorker.js","constantHelper/API.js","store/HospitalList/hospitalListAPIs.js","store/HospitalList/hospitalListSaga.js","store/ManageContent/manageContentAPIs.js","store/ManageContent/manageContentSaga.js","sagas.js","store/Login/loginReducer.js","store/HospitalList/hospitalListReducer.js","store/ManageContent/manageContentReducer.js","reducers.js","store/Login/loginTypes.js","index.js"],"names":["DOMAIN_URL","RESTFULL_API_URL_V2","COOKIE_EXPIRES","SOCKET_CHAT","development","testing","staging","production","currentEnv","_envs","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","Avatar","state","loading","imageUrl","props","hospital","name","typeUrl","isOnSize","handleChange","info","file","status","originFileObj","setState","localStorage","setItem","response","statusCode","history","push","pathname","message","beforeUpload","Promise","resolve","reject","isJpgOrPng","type","error","isLt2M","size","Image","src","window","URL","createObjectURL","onload","width","UNSAFE_componentWillReceiveProps","newProps","uploadButton","this","LoadingOutlined","PlusOutlined","className","fieldName","listType","showUploadList","action","headers","token","getItem","onChange","alt","style","maxHeight","maxWidth","label","React","Component","withRouter","UploadContent","fileList","slice","length","isJson","multiple","UploadOutlined","Option","SelectComponent","componentDidMount","getHospitalList","value","changeHospital","showOption","hospitalList","map","item","index","partnerId","key","defaultValue","default","connect","dispatch","FormContent","axios","post","then","isLogin","data","catch","getManageContent","location","reload","showAvatar","manageContent","xs","sm","md","lg","Fragment","Select","to","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","onFinish","values","username","password","alert","console","log","onFinishFailed","errorInfo","initialValues","remember","Item","rules","required","Password","htmlType","routes","path","exact","main","createBrowserHistory","App","showContentMenus","route","render","Boolean","hostname","match","getHttpRequest","url","a","get","getHospitalListAPI","api","watchGetHospitalList","root","call","error_code","Error","shortData","put","payload","takeLatest","all","fork","getManageContentAPI","watchGetManageContent","rootSaga","initialState","combineReducers","login","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3764f7b2.chunk.js","sourcesContent":["export const DOMAIN_URL = \"http://localhost:6700\"\r\nexport const RESTFULL_API_URL_V2 = \"https://medpro-api-v2-testing.medpro.com.vn\"\r\n\r\n// export const RESTFULL_API_URL = `https://static-inside-testing.medpro.com.vn`;\r\n// export const RESTFULL_API_URL = `http://localhost:6700`;\r\nexport const COOKIE_EXPIRES = 43200; // 12*60*60; // 12 tiếng\r\nexport const SOCKET_CHAT = \"wss://socket.pkh.vn/cable\";\r\n","export const DOMAIN_URL = `https://static-inside-testing.medpro.com.vn`;\r\nexport const RESTFULL_API_URL_V2 = \"https://medpro-api-v2-testing.medpro.com.vn\"\r\n\r\n// export const RESTFULL_API_URL = `https://static-inside-testing.medpro.com.vn`;\r\n// export const RESTFULL_API_URL = `http://localhost:6700`;\r\nexport const COOKIE_EXPIRES = 43200; // 12*60*60; // 12 tiếng\r\n\r\nexport const SOCKET_CHAT = \"wss://alpha-api.medpro.com.vn/cable\";","export const DOMAIN_URL = \"https://static-inside-testing.medpro.com.vn\";\r\nexport const RESTFULL_API_URL_V2 = \"https://medpro-api-v2-testing.medpro.com.vn\"\r\n\r\n// export const RESTFULL_API_URL = `https://static-inside-testing.medpro.com.vn`;\r\nexport const COOKIE_EXPIRES = 43200; // 12*60*60; // 12 tiếng\r\n\r\nexport const SOCKET_CHAT = \"wss://alpha-api.medpro.com.vn/cable\";\r\n","export const DOMAIN_URL = \"https://static-inside-testing.medpro.com.vn\";\nexport const RESTFULL_API_URL_V2 = \"https://medpro-api-v2-testing.medpro.com.vn\"\n\n// export const RESTFULL_API_URL = `https://static-inside-testing.medpro.com.vn`;\nexport const COOKIE_EXPIRES = 43200; // 12*60*60; // 12 tiếng\n\n\nexport const SOCKET_CHAT = \"wss://alpha-api.medpro.com.vn/cable\";\n\n","import * as development from \"./development\";\r\nimport * as production from \"./production\";\r\nimport * as testing from \"./testing\";\r\nimport * as staging from \"./staging\";\r\n// export const URL_DOWNLOAD_IOS = `https://apps.apple.com/`;\r\nexport const URL_DOWNLOAD_IOS = `/`;\r\n// export const URL_DOWNLOAD_ANDROID = `https://play.google.com/`;\r\nexport const URL_DOWNLOAD_ANDROID = `/`;\r\nexport default {\r\n  development,\r\n  testing,\r\n  staging,\r\n  production\r\n};\r\n","import _envs from \"./envs\";\r\n\r\nexport const APP_NAME = \"crm\";\r\nexport const currentEnvName = process.env.REACT_APP_STAGE || \"development\";\r\nexport const envs = _envs;\r\nexport const currentEnv = _envs[currentEnvName];\r\nexport const HOSPITAL_ID = 2;\r\n","import React from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { currentEnv } from \"../../configs\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener('load', () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\n\r\nclass Avatar extends React.Component {\r\n  state = {\r\n    loading: false,\r\n    imageUrl: `${currentEnv.DOMAIN_URL}/static/upload/hospitals/${this.props.hospital}/${this.props.name}.${this.props.typeUrl}`,\r\n    isOnSize: false\r\n  };\r\n\r\n  handleChange = info => {\r\n    if (info.file.status === 'uploading') {\r\n      this.setState({ loading: true });\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, imageUrl => {\r\n        this.setState({\r\n          imageUrl,\r\n          loading: false,\r\n        })\r\n      }\r\n      );\r\n      localStorage.setItem('needRefresh', \"true\");\r\n\r\n    }\r\n    if (info.file.status === 'error') {\r\n      // Get this url from response in real world.\r\n      if (info.file.response.statusCode === 401) {\r\n        this.props.history.push({\r\n          pathname: '/login',\r\n          state: { message: \"Login to upload!\" }\r\n        })\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  beforeUpload = file => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const isJpgOrPng = file.type === this.props.type;\r\n      if (!isJpgOrPng) {\r\n        message.error(`You can only upload ${this.props.type} file!`);\r\n      }\r\n      const isLt2M = file.size / 1024 / 1024 < 5;\r\n      if (!isLt2M) {\r\n        message.error('Image must smaller than 5MB!');\r\n      }\r\n\r\n      let img = new Image()\r\n      img.src = window.URL.createObjectURL(file)\r\n\r\n      img.onload = () => {\r\n        // alert(img.width + \" \" + img.height);\r\n        // console.log(img.width)\r\n        if (isJpgOrPng && isLt2M && img.width > 100) {\r\n          resolve(file);\r\n        } else {\r\n          reject('abc')\r\n        }\r\n\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n\r\n\r\n  UNSAFE_componentWillReceiveProps = (newProps) => {\r\n\r\n    this.setState({ imageUrl: `${currentEnv.DOMAIN_URL}/static/upload/hospitals/${newProps.hospital}/${newProps.name}.${this.props.typeUrl}` });\r\n  }\r\n\r\n  render() {\r\n    const uploadButton = (\r\n      <div>\r\n        {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    const { imageUrl } = this.state;\r\n\r\n    return (\r\n      <div className=\"upload\">\r\n        <Upload\r\n          name={this.props.fieldName}\r\n          listType=\"picture-card\"\r\n          className=\"avatar-uploader\"\r\n          showUploadList={false}\r\n          action={`${currentEnv.DOMAIN_URL}/upload`}\r\n          headers={{ hospital: this.props.hospital, name: this.props.name, token: `${localStorage.getItem('token')}` }}\r\n          beforeUpload={this.beforeUpload}\r\n          onChange={this.handleChange}\r\n        >\r\n          {imageUrl ? <img src={imageUrl} alt=\"\" style={{ maxHeight: '86px', maxWidth: '86px' }} /> : uploadButton}\r\n        </Upload>\r\n        <p>{this.props.label}</p><br />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Avatar);","import React from 'react';\r\nimport { Upload, Button, message } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { currentEnv } from \"../../configs\";\r\nimport \"./UploadContent.css\"\r\n\r\nclass UploadContent extends React.Component {\r\n  state = {\r\n    fileList: [\r\n      // {\r\n      //   uid: '-1',\r\n      //   name: 'xxx.png',\r\n      //   status: 'done',\r\n      //   url: 'http://www.baidu.com/xxx.png',\r\n      // },\r\n    ],\r\n  };\r\n\r\n  handleChange = info => {\r\n\r\n    let fileList = [...info.fileList];\r\n\r\n    // 1. Limit the number of uploaded files\r\n    // Only to show two recent uploaded files, and old ones will be replaced by the new\r\n    fileList = fileList.slice(-1);\r\n    // console.log(fileList)\r\n\r\n    if (fileList.length > 0) {\r\n      if (fileList[0].type !== this.props.type) {\r\n        fileList[0].status = 'error'\r\n      }\r\n    }\r\n    this.setState({ fileList });\r\n\r\n    if (info.file.status === 'error') {\r\n      // Get this url from response in real world.\r\n      if (info.file.response.statusCode === 401) {\r\n        this.props.history.push({\r\n          pathname: '/login',\r\n          state: { message: \"Login to upload!\" }\r\n        })\r\n      }\r\n    }\r\n  };\r\n\r\n  beforeUpload = file => {\r\n    // console.log(file)\r\n    const isJson = file.type === this.props.type;\r\n    if (!isJson) {\r\n      message.error(`You can only upload ${this.props.type} file!`);\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 5;\r\n    if (!isLt2M) {\r\n      message.error('File must smaller than 5MB!');\r\n    }\r\n\r\n    return isJson && isLt2M;\r\n  }\r\n\r\n  render() {\r\n    const props = {\r\n      name: this.props.fieldName,\r\n      action: `${currentEnv.DOMAIN_URL}/${this.props.action}`,\r\n      headers: { hospital: this.props.hospital, name: this.props.name, token: `${localStorage.getItem('token')}` },\r\n      onChange: this.handleChange,\r\n      beforeUpload: this.beforeUpload,\r\n      multiple: true,\r\n    };\r\n\r\n    return (\r\n\r\n      <div className=\"upload\">\r\n        <div className=\"up_cont\">\r\n          <Upload {...props} fileList={this.state.fileList}>\r\n            <Button>\r\n              <UploadOutlined /> Upload\r\n          </Button>\r\n          </Upload>\r\n        </div>\r\n        <p>{this.props.label}</p><br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withRouter(UploadContent);","import React from 'react';\r\nimport { Select } from 'antd';\r\n// import { selectObject } from \"./select-config\";\r\nimport { connect } from \"react-redux\";\r\nimport { getHospitalList } from \"../../store/HospitalList/hospitalListActions\";\r\n\r\n\r\n\r\n// console.log(hospitalList)\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectComponent extends React.Component {\r\n\r\n  componentDidMount = () => {\r\n    this.props.getHospitalList()\r\n  }\r\n  handleChange = (value) => {\r\n    this.props.changeHospital(`${value}`)\r\n  }\r\n\r\n  showOption = () => {\r\n\r\n    const result = this.props.hospitalList.map((item, index) => {\r\n      return <Option value={item.partnerId} key={index}>{item.name}</Option>\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.hospitalList)\r\n    return (\r\n      <Select defaultValue={this.props.default} style={{ width: 320 }} onChange={this.handleChange} size={\"middle\"}>\r\n        {this.showOption()}\r\n      </Select>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  const { hospitalList } = state;\r\n  return { hospitalList };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getHospitalList: () => {\r\n    dispatch(getHospitalList());\r\n  },\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectComponent);","import * as types from \"./hospitalListTypes\";\r\n\r\n\r\nexport const getHospitalList = () => {\r\n  return {\r\n    type: types.GET_HOSPITAL_LIST,\r\n  };\r\n};","export const GET_HOSPITAL_LIST = \"GET_HOSPITAL_LIST\";\r\nexport const GET_HOSPITAL_LIST_SUCCESS = \"GET_HOSPITAL_LIST_SUCCESS\";\r\nexport const GET_HOSPITAL_LIST_FAIL = \"GET_HOSPITAL_LIST_FAIL\";\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from \"../../components/Avatar/Avatar\";\r\nimport UploadContent from \"../../components/UploadContent/UploadContent\";\r\nimport Select from \"../../components/Select/Select\";\r\nimport { currentEnv } from \"../../configs\";\r\nimport { getManageContent } from \"../../store/ManageContent/manageContentActions\"\r\nimport \"./FormContent.css\"\r\nimport axios from \"axios\";\r\n\r\nclass FormContent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hospital: localStorage.getItem('hospital') || \"dkkvangiang\",\r\n      isLogin: true\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    axios.post(`${currentEnv.DOMAIN_URL}/checkAuth`, {\r\n      token: localStorage.getItem('token')\r\n    })\r\n      .then(response => {\r\n        this.setState({\r\n          isLogin: response.data.isLogin\r\n        })\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLogin: false\r\n        })\r\n      });\r\n\r\n    this.props.getManageContent()\r\n  }\r\n\r\n  changeHospital = (value) => {\r\n    localStorage.setItem('hospital', value);\r\n    this.setState({\r\n      hospital: value\r\n    })\r\n    if (localStorage.getItem('needRefresh') === 'true') {\r\n      localStorage.setItem('needRefresh', 'false')\r\n      window.location.reload();\r\n    }\r\n    // this.props.history.push('login')\r\n  }\r\n\r\n  // onFinish = values => {\r\n  //   console.log('Success:', values);\r\n  // };\r\n\r\n  // onFinishFailed = errorInfo => {\r\n  //   console.log('Failed:', errorInfo);\r\n  // };\r\n\r\n\r\n\r\n  showAvatar = () => {\r\n    const hospital = this.state.hospital\r\n    const formUploadItem = this.props.manageContent[hospital] ? this.props.manageContent[hospital] : []\r\n\r\n    const result = formUploadItem.map((item, index) => {\r\n      if (item.fieldName === 'content') {\r\n        return <Col xs={24} sm={12} md={8} lg={4} key={index}>\r\n          <UploadContent\r\n            label={item.label}\r\n            name={item.name}\r\n            hospital={this.state.hospital}\r\n            type={item.type}\r\n            fieldName={item.fieldName}\r\n            action={item.action}\r\n          // typeUrl={item.typeUrl}\r\n          />\r\n        </Col >\r\n      }\r\n      return <Col xs={24} sm={12} md={8} lg={4} key={index}>\r\n        <Avatar\r\n          label={item.label}\r\n          name={item.name}\r\n          hospital={this.state.hospital}\r\n          type={item.type}\r\n          fieldName={item.fieldName}\r\n          typeUrl={item.typeUrl}\r\n        />\r\n      </Col >\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  render() {\r\n\r\n    const isLogin = this.state.isLogin;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {\r\n          !isLogin ? <Redirect to={{\r\n            pathname: '/login',\r\n            // state: {\r\n            //   from: location\r\n            // }\r\n          }\r\n          } /> :\r\n            <div>\r\n              <br />\r\n              <br />\r\n              <Select changeHospital={this.changeHospital} default={this.state.hospital} size=\"large\" />\r\n              <br />\r\n              <br />\r\n              <Row>\r\n                {this.showAvatar()}\r\n                <Col xs={24} sm={12} md={8} lg={4}>\r\n                  <UploadContent\r\n                    label=\"Manage Content\"\r\n                    name=\"manageContent\"\r\n                    hospital=\"manageContent\"\r\n                    type=\"application/json\"\r\n                    fieldName=\"manageContent\"\r\n                    action=\"manageContent\"\r\n                  // typeUrl={item.typeUrl}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  manageContent: state.manageContent\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getManageContent: () => {\r\n    dispatch(getManageContent());\r\n  },\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContent);","import * as types from \"./manageContentTypes\";\r\n\r\n\r\nexport const getManageContent = () => {\r\n  return {\r\n    type: types.GET_MANAGE_CONTENT,\r\n  };\r\n};","export const GET_MANAGE_CONTENT = \"GET_MANAGE_CONTENT\";\r\nexport const GET_MANAGE_CONTENT_SUCCESS = \"GET_MANAGE_CONTENT_SUCCESS\";\r\nexport const GET_MANAGE_CONTENT_FAIL = \"GET_MANAGE_CONTENT_FAIL\";\r\n","import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport axios from 'axios';\r\nimport { currentEnv } from \"../../configs\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\n\r\nclass Login extends React.Component {\r\n  onFinish = values => {\r\n    // console.log('Success:', values);\r\n    axios.post(`${currentEnv.DOMAIN_URL}/login`, {\r\n      username: values.username,\r\n      password: values.password\r\n    })\r\n      .then(response => {\r\n        // console.log(response.data)\r\n        if (response.data) {\r\n          localStorage.setItem('token', response.data);\r\n          this.props.history.push('/')\r\n        } else {\r\n          alert('Wrong username or password!')\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        alert('Some error have happened!')\r\n      });\r\n  };\r\n\r\n  onFinishFailed = errorInfo => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.location.state) {\r\n      if (this.props.location.state.message) {\r\n        alert(this.props.location.state.message)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Form\r\n          {...layout}\r\n          name=\"basic\"\r\n          initialValues={{\r\n            remember: true,\r\n          }}\r\n          onFinish={this.onFinish}\r\n          onFinishFailed={this.onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your username!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n        </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default Login\r\n\r\n\r\n","import React from 'react';\r\nimport FormContent from './Page/FormContent/FormContent';\r\nimport Login from './Page/Login/Login';\r\n\r\nconst routes = [\r\n\r\n\t{\r\n\t\tpath: '/',\r\n\t\texact: true,\r\n\t\tmain: props => <FormContent {...props} />\r\n\t},\r\n\t{\r\n\t\tpath: '/login',\r\n\t\texact: false,\r\n\t\tmain: props => <Login {...props} />\r\n\t}\r\n];\r\n\r\nexport default routes;","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route, BrowserRouter as Router, HashRouter } from 'react-router-dom';\n// import FormContent from \"./Page/FormContent/FormContent\";\nimport routes from './routes';\nimport history from \"./history\";\n\nclass App extends React.Component {\n\n\n  showContentMenus = (routes) => {\n    var result = null;\n    if (routes.length > 0) {\n      result = routes.map((route, index) => {\n        return (<Route key={index} path={route.path} exact={route.exact} render={route.main} />)\n      })\n    }\n\n    return <Switch>{result}</Switch>\n  }\n\n  render() {\n    return (\n\n      <HashRouter history={history}>\n        <div className=\"App\">\n          {this.showContentMenus(routes)}\n\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport const getHttpRequest = async url => axios.get(url);\r\nexport const postHttpRequestAsync = async (url, data = {}, config = {}) => axios.post(url, data, config);","import * as api from \"../../constantHelper/API\";\r\n\r\nexport const getHospitalListAPI = (url) => {\r\n  return api.getHttpRequest(url);\r\n};","import { put, call, fork, all, takeLatest, select } from \"redux-saga/effects\";\r\nimport * as api from \"./hospitalListAPIs\";\r\nimport * as types from \"./hospitalListTypes\"\r\nimport { currentEnv } from \"../../configs\";\r\n\r\n\r\n\r\n\r\nfunction* getHospitalList(data) {\r\n  try {\r\n    // const baseUrl = yield select(state => getBaseUrl(state.hospital));\r\n    const response = yield call(api.getHospitalListAPI, `${currentEnv.RESTFULL_API_URL_V2}/mongo/hospital/list`);\r\n    if (response.status !== 200 || response.data.error_code)\r\n      throw new Error(\"Lỗi server!\");\r\n    if (response) {\r\n      const { data } = response;\r\n      const shortData = data.map((item, index) => {\r\n        return { name: item.name, partnerId: item.partnerId }\r\n      })\r\n      yield put({ type: types.GET_HOSPITAL_LIST_SUCCESS, payload: shortData });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: types.GET_HOSPITAL_LIST_FAIL, error });\r\n  }\r\n}\r\nfunction* watchGetHospitalList() {\r\n  yield takeLatest(types.GET_HOSPITAL_LIST, getHospitalList);\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* root() {\r\n  yield all([\r\n    fork(watchGetHospitalList),\r\n  ]);\r\n}\r\n","import * as api from \"../../constantHelper/API\";\r\n\r\nexport const getManageContentAPI = (url) => {\r\n  return api.getHttpRequest(url);\r\n};","import { put, call, fork, all, takeLatest, select } from \"redux-saga/effects\";\r\nimport * as api from \"./manageContentAPIs\";\r\nimport * as types from \"./manageContentTypes\"\r\nimport { currentEnv } from \"../../configs\";\r\n\r\n\r\n\r\n\r\nfunction* getManageContent(data) {\r\n  try {\r\n    // const baseUrl = yield select(state => getBaseUrl(state.hospital));\r\n    const response = yield call(api.getManageContentAPI, `${currentEnv.DOMAIN_URL}/static/upload/hospitals/manageContent/manageContent.json`);\r\n    if (response.status !== 200 || response.data.error_code)\r\n      throw new Error(\"Lỗi server!\");\r\n    if (response) {\r\n      const { data } = response;\r\n      // const shortData = data.map((item, index) => {\r\n      //   return { name: item.name, partnerId: item.partnerId }\r\n      // })\r\n      yield put({ type: types.GET_MANAGE_CONTENT_SUCCESS, payload: data });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: types.GET_MANAGE_CONTENT_FAIL, error });\r\n  }\r\n}\r\nfunction* watchGetManageContent() {\r\n  yield takeLatest(types.GET_MANAGE_CONTENT, getManageContent);\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* root() {\r\n  yield all([\r\n    fork(watchGetManageContent),\r\n  ]);\r\n}\r\n","import { all, fork } from \"redux-saga/effects\";\r\n\r\nimport getHospitalList from \"./store/HospitalList/hospitalListSaga\";\r\nimport getManageContent from \"./store/ManageContent/manageContentSaga\";\r\n\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getHospitalList),\r\n    fork(getManageContent),\r\n    // fork(ZabbixAlertSaga),\r\n  ]);\r\n}\r\n","import * as types from \"./loginTypes\";\r\n\r\nconst initialState = {\r\n  username: { value: \"\" },\r\n  password: { value: \"\" }\r\n\r\n};\r\n\r\nexport default function loginReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case types.SAVE_FIELD_LOGIN:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"./hospitalListTypes\";\r\n\r\nconst initialState = [];\r\n\r\nexport default function hospitalListReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case types.GET_HOSPITAL_LIST:\r\n      return [\r\n        ...state,\r\n        // ...action.payload\r\n      ];\r\n    case types.GET_HOSPITAL_LIST_SUCCESS:\r\n      return [\r\n        ...state,\r\n        ...action.payload\r\n      ];\r\n    case types.GET_HOSPITAL_LIST_FAIL:\r\n      return [\r\n        ...state,\r\n        ...action.error\r\n      ];\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"./manageContentTypes\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function manageContentReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case types.GET_MANAGE_CONTENT:\r\n      return {\r\n        ...state,\r\n        // ...action.payload\r\n      };\r\n    case types.GET_MANAGE_CONTENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    case types.GET_MANAGE_CONTENT_FAIL:\r\n      return {\r\n        ...state,\r\n        ...action.error\r\n      };\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport login from \"./store/Login/loginReducer\"\r\nimport hospitalList from \"./store/HospitalList/hospitalListReducer\"\r\nimport manageContent from \"./store/ManageContent/manageContentReducer\"\r\n\r\n\r\nexport default combineReducers({\r\n  login,\r\n  hospitalList,\r\n  manageContent,\r\n\r\n});\r\n","export const SAVE_FIELD_LOGIN = \"SAVE_FIELD_LOGIN\";\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\n// import appReducers from './reducers/index';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(sagaMiddleware)\n    // other store enhancers if any\n  )\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}